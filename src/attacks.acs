#define MAX_MONSTERATTACKS 50
int MonsterAttacks[MAX_MONSTERATTACKS][15] = 
{
	{ "Cacomental", "\cgNormal", "\cgSeeking", "\cgComet", "X" },
	{ "HellKnight~", "\cdNormal", "\cdBurst Ball", "\cdComet", "X" },
	{ "PyroDemon", "\ciNormal", "\ciComet", "\ciFloor Hugger", "X" },
	{ "CyberNoble", "Shotgun", "\cdBurst Ball", "\cdLarge Ball", "Rocket", "X" },
	{ "HellDuke", "\cdNormal", "\cdGiant Ball", "\cdBurst Comet", "\cdFloor Hugger", "X" },
	{ "BaronOfHell~", "\cdNormal", "\cdGiant Balls", "\cdComet", "X" },
	{ "BruiserDemon", "\ciNormal", "\ciGiant Balls", "\ciComet", "X" },
	{ "Cybruiser", "\chRailgun", "Rockets", "Homing Rockets", "\cgBFG15K", "X" },
	{ "Demolisher", "Normal", "\cdBFG15K", "\cdBFG9K", "X" },
	{ "DarkDemolisher", "Normal", "\cdBFG9K", "\cdBFG10K", "X" },
	{ "CerebralSentient", "Normal", "\cgBFG9K", "\cgBFG10K", "\cgDemon Tech BFG10K", "X" },
	{ "DarkCyberdemon", "Rockets", "Homing Rockets", "\cdFloor Stomp", "\cdRailgun", "\cdBFG15K", "X" },
	{ "Cardinal", "Rockets", "Homing Rockets", "\cgRailgun", "\cgBFG10K", "\cgDemon Tech BFG10K", "X" },
	
	// lca duplicates
	{ "NewCerebralSentient", "Normal", "\cgBFG9K", "\cgBFG10K", "\cgDemon Tech BFG10K", "X" },
	
	// lca
	{ "CerebralCardinal", "Normal", "Cyber Rockets", "Cyber Homing Rockets", "\cgBFG95K", "\cgBFG10K Combo", "\cgRailgun", "\cgDemon Tech Combo", "\cgwDemon Tech Devastator", /*"Fusion Nuke", */"X" },
	{ "LegendaryRevenant", "\cvNormal", "\cvBest Attack", "\cvRage", "\cvRocket", "Dash Punch", "X" },	
	{ "PhaseOverlord", "\ctNormal", "\ctPhazoLaser", "\ctSpread", "\ctComet", "X" },
	{ "LegendaryCyberdemon", "\chNormal", "Legendary Auto Shotgun", "\chFinder", "Legendary BFG95K", "\chLegendary Tech", "Legendary BFG", "Legendary Railgun", "Legendary BFG10K", "Legendary Stomp", "Legendary BFG15K", "Legendary DTBFG", "Legendary Devastator", "X" },	
	{ "LegendaryHellKnight", "\cnNormal", "Spread", "\chHugger", "\chRage", "\cnBest Attack", "\chRain", "\cv4 Comets", "\chBlue Comet", "X" },
	{ "LegendaryImp", "\cvNormal", "\cvSeeker", "\cvSuper", "X" },	
	{ "LegendarySentient", "Normal", "Legendary BFG9K", "Legendary BFG10K", "Legendary DTBFG10K", "Legendary BFG15K", "\chLegendary Tech", "Cannon", "Legendary BFG", "Legendary Storm", "X" },	
	{ "Velocirator", "Floor", "Super Floor", "Ghost", "Heal", "X" },
	
	// randommons
	{ "Afrit", "Normal", "Tracer", "Comet" },
	{ "BFGMastermind", "Normal", "BFG15K", "BFG10K", "Railgun", "BFG9K", "DTBFG" },
	{ "CacoLich", "Normal", "Seeking", "Comet", "Breath" },
	{ "CerebralSlayer", "Normal", "BFG9K", "BFG10K", "Railgun", "DTBFG10K", "Pyro Cannon", "Third Eye" },
	{ "CorruptedCyberLord", "Normal", "Seekers", "Floor Stomp", "BFG15K", "Railgun" },
	{ "CryoDemon", "Normal", "Comet", "Floor Hugger" },
	{ "DemolisherMkII", "Normal", "BFG15K", "BFG9K" },
	{ "DemolisherMkIIRevenge", "Normal", "BFG9K", "BFG10K" },
	{ "HellArchon", "Normal", "Fast Ball", "Comet" },
	{ "HellFireBaron", "Normal", "Giant Balls", "Comet", "Tracers", "Spread" },
	{ "HFCyberdemon", "Rockets", "Stomp", "Fire Grenades", "Seekers", "Floor Stomp", "Railgun", "Fuel Rockets", "Fire Balls", "HF10K", "Pyro Shot", "Souls Storm", "Ultimate Combo" },
	{ "Paladin", "Normal", "Grenadier", "Rocket", "Railgun", "BFG10K" },
	{ "PhaseWarlord", "Seekers", "Comets", "Spread", "Seekers2", "Floor Hugger", "Dark Matter", "Ultimate Floor Hugger" },
	{ "Terminator2MOP", "Normal", "Railgun", "BFG9K", "BFG10K", "DTBFG", "RedStar", "Plasma Minigun", "PyroShot", "Demon Tech Devastator", "Nuke" },
	{ "ToxicLord", "Normal", "Giant Balls", "Burst Comet" },
	{ "WidowMaker", "Autocannon", "Seek Missile", "Seek Missile 2" },

	{ "MONSTERATTACKS" }
};

function int FindMonsterAttackList(str actorname)
{
	int i = 0;
	while (StrCmp(MonsterAttacks[i][0], "MONSTERATTACKS"))
	{
		if (!StrCmp(MonsterAttacks[i][0], actorname))
			return i;
		i++;
	}
	return -1;
}

script mop_attackswitching (int attacklist)
{
	int attack = 1;
	GiveInventory("Attack1", 1);
	int prevbuttonstate = !!(GetPlayerInput(-1, INPUT_BUTTONS) & BT_ALTATTACK);
	while (GetActorProperty(0, APROP_HEALTH) > 0 && CheckInventory("IsPossessed"))
	{
		int buttonstate = !!(GetPlayerInput(-1, INPUT_BUTTONS) & BT_ALTATTACK);
		if (prevbuttonstate == 0 && buttonstate == 1)
		{
			TakeInventory(StrParam(s:"Attack", d:attack), 1);
			attack++;
			if (!StrCmp(MonsterAttacks[attacklist][attack], "X"))
				attack = 1;
			GiveInventory(StrParam(s:"Attack", d:attack), 1);
			print(s:MonsterAttacks[attacklist][attack]);
		}
		prevbuttonstate = buttonstate;
		Delay(1);
	}
	TakeInventory(StrParam(d:"Attack", s:attack), 1);
}
#define PLAYER_MARINE 1
#define PLAYER_MOP 2

int PlayerClasses[MAX_PLAYERS];

int MarineCount = 0;
int PuppetMasterCount = 0;
int PossessedCount = 0;

int Lives = 0;

script mop_enter ENTER
{
	Thing_ChangeTid(0, 1000 + PlayerNumber());
	
	if (PlayerClass(PlayerNumber()) == 1)
	{
		PlayerClasses[PlayerNumber()] = PLAYER_MOP;
		Log(n:0, s:" becomes a Puppet Master.");
	}
	else
	{
		PlayerClasses[PlayerNumber()] = PLAYER_MARINE;
		Log(n:0, s:" becomes a Doom Guy.");
	}
	
	MakePuppetMasterFlying();
	UpdatePlayerCount();
}
script mop_respawn RESPAWN
{
	// Get rid of old tids.
	Thing_ChangeTid(1000 + PlayerNumber(), 0);
	Thing_ChangeTid(0, 1000 + PlayerNumber());
	MakePuppetMasterFlying();
}

script mop_disconnect (int player) DISCONNECT
{
	UpdatePlayerCount();
}

function void MakePuppetMasterFlying(void)
{
	if (PlayerClasses[PlayerNumber()] == PLAYER_MOP)
		SetPlayerProperty(0, true, PROP_FLY);
}

function void UpdatePlayerCount(void)
{
	MarineCount = 0;
	PuppetMasterCount = 0;

	for (int i = 0; i < MAX_PLAYERS; i++)
	{
		if (!PlayerInGame(i))
			continue;

		if (PlayerClasses[i] == PLAYER_MOP)
			PuppetMasterCount++;
		else if (PlayerClasses[i] == PLAYER_MARINE)
			MarineCount++;
	}
}

function int TotalMonsterCount(void)
{
	return GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) + PossessedCount;
}

function int LivingMonsterCount(void)
{
	return TotalMonsterCount() - GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
}

function int GenTempTid(void)
{
	return TEMPTID + PlayerNumber();
}

int Bossbrain = 0;
int DamageFactor = 1.0;

script mop_init OPEN
{
	ConsoleCommand("compat_clientssendfullbuttoninfo 1");
	ConsoleCommand("sv_disallowsuicide 1");
	
	if (!GetCVar("mop_noautoconfig"))
	{
		ConsoleCommand("sv_nocoopinfo 1");
		ConsoleCommand("sv_noautomapallies 1");
	}
	
	if (GameSkill() > 3)
	{
		DamageFactor = 1.5;
		ConsoleCommand("teamdamage 1.5");
	}
	else
	{
		DamageFactor = 1.0;
		ConsoleCommand("teamdamage 1");
	}
		
	Delay(5); // Let monster replacers spawn.
	
	int monsterforces = 0.0;
	for (int i = 0; i < NUM_MONSTER_TYPES; i++)
	{
		monsterforces += MonsterTypes[i][MONSTER_DIFFICULTY] * ThingCountName(MonsterTypes[i][MONSTER_ACTORNAME], 0);
	}
	
	Lives = (monsterforces>>16) + 1;
	
	if (ThingCountName("BossBrain", 0))
	{
		BossBrain = true;
		Lives += 10;
	}
	
	ACS_ExecuteAlways(mop_wincondition, 0);
}

script mop_status OPEN
{
	int prev_MarineCount = -1;
	int prev_PuppetmasterCount;
	int prev_Lives;
	int prev_LivingMonsterCount;
	
	while (true)
	{
	
	if (MarineCount != prev_MarineCount || PuppetMasterCount != prev_PuppetMasterCount || Lives != prev_Lives || LivingMonsterCount() != prev_LivingMonsterCount)
	{	
		SetFont("SMALLFONT");
		SetHudSize(640, 480, 1);
		HudMessageBold(s:"\cdMarines\c-: ", d:MarineCount,
			s:"\n\cgMops\c-: ", d:PuppetMasterCount,
			s:"\n",
			s:"\nReinforcements: ", d:Lives,
			s:"\nMonsters: ", d:LivingMonsterCount();
		HUDMSG_PLAIN, 6, CR_YELLOW, 320.0, 50.0, 0);
		
		prev_MarineCount = MarineCount;
		prev_PuppetmasterCount = PuppetmasterCount;
		prev_Lives = Lives;
		prev_LivingMonsterCount = LivingMonsterCount();
	}
	
	Delay(1);
	}
}

script mop_marinedeath DEATH
{
	if (PlayerClasses[PlayerNumber()] == PLAYER_MARINE)
		Lives--;
		
	if (Lives <= 0)
		ACS_ExecuteAlways(mop_demonwin, 0);
}

int may_exit;

script mop_wincondition (void)
{
	if (!Bossbrain && !may_exit && LivingMonsterCount() < TotalMonsterCount() / 2)
	{
		AmbientSound("game/canexit" ,127);
		SetHudSize(320, 240, 0);
		SetFont("BIGFONT");
		hudmessageBOLd(s:"Marines may now exit.";
			HUDMSG_FADEOUT, 0, CR_GREEN, 160.0,155.0, 2.5);

		may_exit = true;
	}
	
	if (LivingMonsterCount() == 0)
	{
		ACS_ExecuteAlways(mop_marinewin, 0);
	}
	
	Delay(1);
	restart;
}

int won = false;

// Marines win.
script mop_marinewin (int secret)
{
	if (PlayerClasses[PlayerNumber()] == PLAYER_MOP)
	{
		print(s:"\cgPuppetmasters can't exit.");
		terminate;
	}
	
	if (LivingMonsterCount() >= TotalMonsterCount() / 2)
	{
		print(s:"\cdHalf of monsters must be dead before marines can exit.");
		terminate;
	}
	
	if (won)
		terminate;
	won = true;
	
	print(s:"\cd", n:1 + PlayerNumber(), s:" has reached the exit.");

	SetHudSize(320, 240, 0);
	SetFont("BIGFONT");
	hudmessageBOLd(s:"Marines Win!";
		HUDMSG_FADEOUT, 0, CR_GREEN, 160.0,155.0, 3.5);

	// Ripped from MOP-X.
	AmbientSound("grunt/death1",127);
	delay(random(10,15));
	AmbientSound("grunt/death2",127);
	delay(random(10,15));
	AmbientSound("grunt/death3",127);
	delay(15);
	AmbientSound("demon/death",127);
	delay(random(10,15));
	AmbientSound("caco/death",127);
	delay(random(10,15));
	AmbientSound("baron/death",127);
	delay(15);
	AmbientSound("skeleton/death",127);
	delay(15);
	AmbientSound("demon/death",127);
	delay(13);
	AmbientSound("grunt/death1",127);
	delay(random(10,15));
	AmbientSound("grunt/death2",127);
	delay(random(10,15));
	AmbientSound("grunt/death3",127);
	delay(15);
	AmbientSound("demon/death",127);
	delay(random(10,15));
	AmbientSound("caco/death",127);
	delay(random(10,15));
	AmbientSound("baron/death",127);
	delay(15);
	AmbientSound("skeleton/death",127);
	delay(15);
	AmbientSound("demon/death",127);
	// End of MOP-X code.

	if (secret)
		Exit_Secret(0);
	else
		Exit_Normal(0);
}

// Puppetmasters win.
Script mop_demonwin (void)
{
	if (won)
		terminate;
	won = true;

	// Ripped from MOP-X.
	SetHUDSize(320,240,0);
	setfont("BIGFONT");
	hudmessageBOLd(s:"Puppet Masters Win!";
		HUDMSG_FADEOUT, 0, CR_RED, 160.0,155.0, 3.5);
	AmbientSound("baron/sight",127);
	delay(10);
	AmbientSound("baron/sight",127);
	delay(10);
	AmbientSound("baron/sight",127);
	delay(10);
	AmbientSound("baron/sight",127);
	delay(35 * 3);
	Exit_normal(0);
	delay(1);
	terminate;
	// End of MOP-X code.
}
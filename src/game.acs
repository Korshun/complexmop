#define PLAYER_MARINE 1
#define PLAYER_MOP 2

int PlayerClasses[MAX_PLAYERS];

int MarineCount = 0;
int PuppetMasterCount = 0;
int PossessedCount = 0;

int Lives = 999;

int BoomEdition = true;

int MopFrags[MAX_PLAYERS];

script mop_log_join(int player, int team) clientside
{
	switch(team)
	{
	case PLAYER_MARINE: Log(n:player+1, s:" becomes a Doom Guy."); break;
	case PLAYER_MOP: Log(n:player+1, s:" becomes a Puppet Master."); break;
	}
}

script mop_enter ENTER
{
	Thing_ChangeTid(0, 1000 + PlayerNumber());
	
	if (PlayerClass(PlayerNumber()) == 1)
	{
		PlayerClasses[PlayerNumber()] = PLAYER_MOP;
		//SetPlayerProperty(0, true, PROP_ALLMAP);
		GiveInventory("AllMap", 1);
		ACS_ExecuteAlways(mop_monsterinfo, 0);
	}
	else
	{	
		PlayerClasses[PlayerNumber()] = PLAYER_MARINE;
		//SetPlayerProperty(0, false, PROP_ALLMAP);
		if (GetCVar("mop_pistolstart"))
		{		
			ClearInventory();
			
			TakeInventory("MOP Melee", 1);
			TakeInventory("MOP Handgun", 1);
			TakeInventory("MOP Chainsaw", 1);
			TakeInventory("MOP Combat Shotgun", 1);
			TakeInventory("MOP Assault Shotgun", 1);
			TakeInventory("MOP Double Barrel Shotgun", 1);
			TakeInventory("MOP Quad Barrel Shotgun", 1);
			TakeInventory("MOP Assault Rifle", 1);
			TakeInventory("MOP Minigun", 1);
			TakeInventory("MOP Rocket Launcher", 1);
			TakeInventory("MOP Grenade Launcher", 1);
			TakeInventory("MOP Plasma Rifle", 1);
			TakeInventory("MOP Railgun", 1);
			TakeInventory("MOP BFG9500", 1);
			TakeInventory("MOP BFG10K", 1);
			TakeInventory("MOP Demon Tech Rifle", 1);
			TakeInventory("MOP Demon Tech BFG10K", 1);
			TakeInventory("MOP MP40", 1);
			
			GiveInventory("MOP Handgun", 1);
			GiveInventory("HandGrenadeAmmo", 2);
			GiveInventory("MineAmmo", 2);
			GiveInventory("MOP Melee", 1);
			GiveInventory("BulletMag", 60);
			GiveInventory("PistolMagazine", 16);
			GiveInventory("ShotgunMagazine", 9);
			GiveInventory("SSGShell", 2);
			GiveInventory("ShotgunDrum", 16);
			GiveInventory("QuadShell", 4);
			GiveInventory("ARMagazine", 41);
			GiveInventory("RocketDrum", 7);
			GiveInventory("GrenadeDrum", 7);
			GiveInventory("PlasmaCell", 50);
			GiveInventory("DemonMagazine", 60);
			GiveInventory("CellCharge", 50);
			GiveInventory("MP40Mag", 33);
			GiveInventory("StartingArmor", 1);
			GiveInventory("IsMarine", 1);
			
			SetActorProperty(0, APROP_HEALTH, 100);
			
			if (GetCVar("mop_pistolstart") == 1)
			{
				print(s:"pistol start");
			}
			else
			{
				print(s:"shotgun start");
				GiveInventory("MOP Combat Shotgun", 1);
			}
		}
	}
	
	ACS_ExecuteAlways(mop_log_join, 0, PlayerNumber(), PlayerClasses[PlayerNumber()]);
	LaunchPlayerScripts();
	UpdatePlayerCount();
	
	SetWeapon("MOP Melee");
	Delay(1); // Fix desync.
	
	if (GetCVar("mop_pistolstart") == 1)
	{
		SetWeapon("MOP Handgun");
	}
	else if (GetCVar("mop_pistolstart") == 2)
	{
		SetWeapon("MOP Combat Shotgun");
	}
}
script mop_respawn RESPAWN
{
	// Get rid of old tids.
	Thing_ChangeTid(1000 + PlayerNumber(), 0);
	Thing_ChangeTid(0, 1000 + PlayerNumber());
	LaunchPlayerScripts();
	
	if (PlayerClasses[PlayerNumber()] == PLAYER_MARINE)
		SetWeapon("MOP Handgun"); // WTF is this bug?
}

script mop_disconnect (int player) DISCONNECT
{
	PlayerClasses[PlayerNumber()] = 0;
	UpdatePlayerCount();
	HudMessage(s:""; HUDMSG_PLAIN, HID_MONSTERINFO, 0, 0, 0, 0, 0);
}

script mop_respawn_protection (void)
{
	int player = PlayerNumber();
	if (PlayerClasses[player] == PLAYER_MOP)
		terminate;

	int time = GetCVar("mop_respawnprotection");
	
	if (time<=0)
		terminate;

	for(int i = time; i > 0; i--)
	{
		if (GetActorProperty(0, APROP_HEALTH) <= 0)
			break;
	
		SetHUDSize(640,480,0);
		SetFont("SMALLFONT");
		HUDMessage(
			s:"Respawn protection: ",
			d:i,
			s:"...";
			HUDMSG_PLAIN, HID_RESPAWNPROTECTION, CR_GOLD, 640.0/2 + 0.8, (480.0/2)+100.0, 0
		);
		
		for (int j = 0; j < 35; j++)
		{
			GiveInventory("InvulEffect", 1);
			GiveInventory("ShadowEffect", 1);
			delay(1);
			TakeInventory("InvulEffect", 1);
			TakeInventory("ShadowEffect", 1);
		}
	}
	
	SetHUDSize(640,480,0);
	SetFont("SMALLFONT");
	HUDMessage(s:""; HUDMSG_PLAIN, HID_RESPAWNPROTECTION, CR_GOLD, 640.0/2 + 0.8, (480.0/2)+100.0, 0);
}

function void LaunchPlayerScripts(void)
{
	MakePuppetMasterFlying();
	ACS_ExecuteAlways(mop_respawn_protection, 0);
	ACS_ExecuteAlways(mop_ally_hud, 0);
	
	if (PlayerClasses[PlayerNumber()] == PLAYER_MARINE && GetCVar("mop_truereinforcements") && Lives == 0)
	{
		if (GetCVar("mop_pistolstart") == 0)
			ConsoleCommand("set mop_pistolstart 2");
							
		ConsoleCommand(StrParam(s:"kickfromgame_idx ", d:PlayerNumber(), s:" \"Marines don't have any more reinforcements.\""));
	}
}

function void MakePuppetMasterFlying(void)
{
	if (PlayerClasses[PlayerNumber()] == PLAYER_MOP)
		SetPlayerProperty(0, true, PROP_FLY);
}

function void UpdatePlayerCount(void)
{
	MarineCount = 0;
	PuppetMasterCount = 0;

	for (int i = 0; i < MAX_PLAYERS; i++)
	{
		if (!PlayerInGame(i))
			continue;

		if (PlayerClasses[i] == PLAYER_MOP)
			PuppetMasterCount++;
		else if (PlayerClasses[i] == PLAYER_MARINE)
			MarineCount++;
	}
}

function int TotalMonsterCount(void)
{
	return GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) + PossessedCount;
}

function int LivingMonsterCount(void)
{
	return TotalMonsterCount() - GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
}

int Bossbrain = 0;
int DamageFactor = 1.0;

script mop_init OPEN
{
	ConsoleCommand("compat_clientssendfullbuttoninfo 1");
	
	if (BoomEdition)
	{
		ConsoleCommand("alwaysapplydmflags 1");
		ConsoleCommand("sv_noexit 1");
	}
	
	if (!GetCVar("mop_truereinforcements"))
	{
		ConsoleCommand("set mop_truereinforcements 0");
		ConsoleCommand("archivecvar mop_truereinforcements");
	}
	
	if (!GetCVar("mop_pistolstart"))
	{
		ConsoleCommand("set mop_pistolstart 0");
		ConsoleCommand("archivecvar mop_pistolstart");
	}

	if (!GetCVar("mop_noautoconfig"))
	{
		ConsoleCommand("sv_disallowsuicide 1");
		ConsoleCommand("sv_nocoopinfo 1");
		ConsoleCommand("sv_noautomapallies 1");
		ConsoleCommand("sv_disallowspying 1");
		ConsoleCommand("sv_unblockplayers 0");
		
		if (GetCVar("mop_truereinforcements"))
			ConsoleCommand("sv_forcerespawn 1");
	}
	
	if (!GetCVar("mop_respawnprotection"))
	{
		ConsoleCommand("set mop_respawnprotection 5");
		ConsoleCommand("archivecvar mop_respawnprotection");
	}
	
	if (!GetCVar("mop_possfrags_bosses"))
	{
		ConsoleCommand("set mop_possfrags_bosses 3");
		ConsoleCommand("archivecvar mop_possfrags_bosses");
	}

	if (!GetCVar("mop_ignoredeathflags"))
	{
		ConsoleCommand("set mop_ignoredeathflags 3");
		ConsoleCommand("archivecvar mop_ignoredeathflags");
	}
	
	if (GameSkill() > 3)
	{
		DamageFactor = 1.5;
		ConsoleCommand("teamdamage 1.5");
	}
	else
	{
		DamageFactor = 1.0;
		ConsoleCommand("teamdamage 1");
	}
		
	Delay(5); // Let monster replacers spawn.
	
	int monsterforces = 0.0;
	for (int i = 0; i < NUM_MONSTER_TYPES; i++)
	{
		monsterforces += MonsterTypes[i][MONSTER_DIFFICULTY] * ThingCountName(MonsterTypes[i][MONSTER_ACTORNAME], 0);
	}
	
	Lives = (monsterforces>>16) + 1;
	
	if (ThingCountName("BossBrain", 0))
	{
		BossBrain = true;
		Lives += 10;
	}
	
	ACS_ExecuteAlways(mop_wincondition, 0);
}

int won = false;

script mop_status OPEN
{
	int prev_MarineCount = -1;
	int prev_PuppetmasterCount;
	int prev_Lives;
	int prev_LivingMonsterCount;
	
	while (true)
	{
	if (won)
	{
		SetFont("SMALLFONT");
		SetHudSize(640, 480, 1);
		HudMessageBold(s:""; HUDMSG_PLAIN, HID_GAMESTATUS1, CR_YELLOW, 320.0, 50.0, 0);
		HudMessageBold(s:""; HUDMSG_PLAIN, HID_GAMESTATUS2, CR_YELLOW, 320.0, 50.0, 0);
		HudMessageBold(s:""; HUDMSG_PLAIN, HID_GAMESTATUS_ICON1, CR_YELLOW, 320.0, 50.0, 0);
		HudMessageBold(s:""; HUDMSG_PLAIN, HID_GAMESTATUS_ICON2, CR_YELLOW, 320.0, 50.0, 0);
		HudMessageBold(s:""; HUDMSG_PLAIN, HID_GAMESTATUS_ICON3, CR_YELLOW, 320.0, 50.0, 0);
		HudMessageBold(s:""; HUDMSG_PLAIN, HID_GAMESTATUS_ICON4, CR_YELLOW, 320.0, 50.0, 0);
		terminate;
	}
	
	if (MarineCount != prev_MarineCount || PuppetMasterCount != prev_PuppetMasterCount || Lives != prev_Lives || LivingMonsterCount() != prev_LivingMonsterCount)
	{	
		str lives_reinforcements = "\nLives: ";
		if (GetCVar("mop_truereinforcements"))
			lives_reinforcements = "\nReinforcements: ";
	
		SetFont("SMALLFONT");
		SetHudSize(640, 480, 1);
		HudMessageBold(s:"\cdMarines\c-: ", d:MarineCount,
			s:"\n\cgMops\c-: ", d:PuppetMasterCount;
		HUDMSG_PLAIN, HID_GAMESTATUS1, CR_YELLOW, 270.0, 20.0, 0);
		HudMessageBold(s:lives_reinforcements, d:Lives,
			s:"\nMonsters: ", d:LivingMonsterCount();
		HUDMSG_PLAIN, HID_GAMESTATUS2, CR_YELLOW, 390.0, 15.0, 0);
		
		SetFont("PLAYI");
		HudMessageBold(s:"A";HUDMSG_PLAIN, HID_GAMESTATUS_ICON1, CR_YELLOW, 230.0, 17.0, 0);
		SetFont("MASTI");
		HudMessageBold(s:"A";HUDMSG_PLAIN, HID_GAMESTATUS_ICON2, CR_YELLOW, 230.0, 27.0, 0);
		SetFont("LIVESI");
		HudMessageBold(s:"A";HUDMSG_PLAIN, HID_GAMESTATUS_ICON3, CR_YELLOW, 340.0, 12.0, 0);
		SetFont("MONSTI");
		HudMessageBold(s:"A";HUDMSG_PLAIN, HID_GAMESTATUS_ICON4, CR_YELLOW, 340.0, 22.0, 0);
		
		prev_MarineCount = MarineCount;
		prev_PuppetmasterCount = PuppetmasterCount;
		prev_Lives = Lives;
		prev_LivingMonsterCount = LivingMonsterCount();
	}
	
	Delay(1);
	}
}

#define DEATHF_TEAMKILL 1
#define DEATHF_SUICIDE 2

script mop_marinedeath DEATH
{
	int victim = PlayerNumber();
	
	if (PlayerClasses[victim] != PLAYER_MARINE)
		terminate;
	
	SetActivatorToTarget(0);
	int killer = PlayerNumber();
	int flags = GetCVar("mop_ignoredeathflags");

	if (victim == killer && (flags & DEATHF_SUICIDE))
		terminate;

	if (victim != killer && PlayerClasses[killer] == PLAYER_MARINE && (flags & DEATHF_TEAMKILL))
		terminate;

	Lives--;
	if (Lives < 0)
		Lives = 0;
		
	if (Lives <= 0 && !GetCVar("mop_truereinforcements"))
		ACS_ExecuteAlways(mop_demonwin, 0);
}

function int TryToGoToMarine(int number)
{	
	if (!PlayerInGame(number) || playerClasses[number] != PLAYER_MARINE || GetActorProperty(1000 + number, APROP_HEALTH) <= 0)
		return false;
		
	int x = GetActorX(1000 + number);
	int y = GetActorY(1000 + number);
	int z = GetActorZ(1000 + number);
	int angle = GetActorAngle(1000 + number);
	SetActorPosition(0, x, y, z, false);
	SetActorAngle(0, angle);
	
	TakeInventory("LastFoundMarine", 0x7fffffff);
	GiveInventory("LastFoundMarine", number);
	
	return true;
}

script mop_findmarines (void)
{
	int last = CheckInventory("LastFoundMarine");
	
	for (int i = last + 1; i < MAX_PLAYERS; i++)
	{
		if (TryToGoToMarine(i))
			terminate;
	}
	
	for (i = 0; i <= last; i++)
	{
		if (TryToGoToMarine(i))
			terminate;
	}
}		

int may_exit;

script mop_wincondition (void)
{
	if (BossBrain)
		terminate;

	if (!may_exit && LivingMonsterCount() < TotalMonsterCount() / 2)
	{
		AmbientSound("game/canexit" ,127);
		SetHudSize(320, 240, 0);
		SetFont("BIGFONT");
		hudmessageBOLd(s:"Marines may now exit.";
			HUDMSG_FADEOUT, 0, CR_GREEN, 160.0,155.0, 2.5);

		may_exit = true;
		
		if (BoomEdition)
			ConsoleCommand("sv_noexit 0");
	}
	
	if (LivingMonsterCount() == 0 && TotalMonsterCount() != 0)
	{
		ACS_ExecuteAlways(mop_marinewin, 0);
	}
	
	if (MarineCount == 0 && Lives == 0)
	{
		ACS_ExecuteAlways(mop_demonwin, 0);
	}
	
	Delay(1);
	restart;
}

// Marines win.
script mop_marinewin (int secret)
{
	if (PlayerClasses[PlayerNumber()] == PLAYER_MOP)
	{
		print(s:"\cgPuppetmasters can't exit.");
		terminate;
	}
	
	if (LivingMonsterCount() >= TotalMonsterCount() / 2 && TotalMonsterCount() != 0)
	{
		print(s:"\cdHalf of monsters must be dead before marines can exit.");
		terminate;
	}
	
	if (won)
		terminate;
	won = true;
		
	if (LivingMonsterCount() == 0)
		printbold(s:"\cdAll monsters are dead.");
	else
		printbold(n:1 + PlayerNumber(), s:" \cdhas reached the exit.");
		
	if (BoomEdition)
		ConsoleCommand("sv_noexit 0");

	SetHudSize(320, 240, 0);
	SetFont("BIGFONT");
	hudmessageBOLd(s:"Marines Win!";
		HUDMSG_FADEOUT, 0, CR_GREEN, 160.0,155.0, 3.5);

	// Ripped from MOP-X.
	AmbientSound("grunt/death1",127);
	delay(random(10,15));
	AmbientSound("grunt/death2",127);
	delay(random(10,15));
	AmbientSound("grunt/death3",127);
	delay(15);
	AmbientSound("demon/death",127);
	delay(random(10,15));
	AmbientSound("caco/death",127);
	delay(random(10,15));
	AmbientSound("baron/death",127);
	delay(15);
	AmbientSound("skeleton/death",127);
	delay(15);
	AmbientSound("demon/death",127);
	delay(13);
	AmbientSound("grunt/death1",127);
	delay(random(10,15));
	AmbientSound("grunt/death2",127);
	delay(random(10,15));
	AmbientSound("grunt/death3",127);
	delay(15);
	AmbientSound("demon/death",127);
	delay(random(10,15));
	AmbientSound("caco/death",127);
	delay(random(10,15));
	AmbientSound("baron/death",127);
	delay(15);
	AmbientSound("skeleton/death",127);
	delay(15);
	AmbientSound("demon/death",127);
	// End of MOP-X code.

	if (secret)
		Exit_Secret(0);
	else
		Exit_Normal(0);
}

// Puppetmasters win.
Script mop_demonwin (void)
{
	if (won)
		terminate;
	won = true;
	
	if (BoomEdition)
		ConsoleCommand("sv_noexit 0");

	// Ripped from MOP-X.
	SetHUDSize(320,240,0);
	setfont("BIGFONT");
	hudmessageBOLd(s:"Puppet Masters Win!";
		HUDMSG_FADEOUT, 0, CR_RED, 160.0,155.0, 3.5);
	AmbientSound("baron/sight",127);
	delay(10);
	AmbientSound("baron/sight",127);
	delay(10);
	AmbientSound("baron/sight",127);
	delay(10);
	AmbientSound("baron/sight",127);
	delay(35 * 3);
	Exit_normal(0);
	delay(1);
	terminate;
	// End of MOP-X code.
}

script mop_log_kill(int killer, int victim, int type) clientside
{
	switch(type)
	{
	case 0: Log(n:killer+1, s:"\cg -> \c-", n:victim+1); break;
	case 1: Log(n:victim+1, s:" \cddied."); break;
	case 2: Log(n:killer+1, s:"\ct TEAMKILLED! \c-", n:victim+1); break;
	}
}

script mop_death_log DEATH
{
	int vplayer = PlayerNumber();
	SetActivatorToTarget(0);
	
	int kplayer = PlayerNumber();
	// we don't care about monsters
	if (kplayer == -1)
		terminate;
		
	// we don't care about idiots
	if (kplayer == vplayer)
		terminate;
	
	if (PlayerClasses[kplayer] == PlayerClasses[vplayer])
	{
		ACS_ExecuteAlways(mop_log_kill, 0, kplayer, vplayer, 2);
		terminate;
	}
	
	if (PlayerClasses[kplayer] == PLAYER_MOP)
		ACS_ExecuteAlways(mop_log_kill, 0, kplayer, vplayer, 0);
	else if (PlayerClasses[kplayer] == PLAYER_MARINE)
		ACS_ExecuteAlways(mop_log_kill, 0, kplayer, vplayer, 1);
}



script mop_ally_hud (void)
{
	int prev_ally = -1;
	int prev_hp = -1;
	
	while (GetActorProperty(0, APROP_HEALTH) > 0)
	{		
		int player = PlayerNumber();
		SetActivatorToTarget(0);
		if (PlayerNumber() == -1 || PlayerNumber() == player || PlayerClasses[PlayerNumber()] != PlayerClasses[player])
		{
			SetActivator(1000 + player);
			if (prev_ally != -1)
			{
				HudMessage(s:""; HUDMSG_PLAIN, HID_MONSTERINFO, 0, 0, 0, 0, 0);
				prev_ally = -1;
				prev_hp = -1;
			}
		
			Delay(1);
			continue;
		}
		
		int ally = PlayerNumber();		
		int hp = GetActorProperty(0, APROP_HEALTH);
		
		if (PlayerClasses[ally] == PLAYER_MOP)
			hp -= POSSESSED_ADDITIONAL_HP;
		
		SetActivator(1000 + player);
		if (prev_hp != hp && prev_ally != ally)
		{
			SetHUDSize(640,480,0);
			SetFont("SMALLFONT");
			HUDMessage(
				d:hp,
				s:" hp\n";
				HUDMSG_PLAIN, HID_MONSTERINFO, CR_RED, 640.0/2 + 0.4, (480.0/2)+100.0, 0
			);
			
			prev_ally = ally;
			prev_hp = hp;
		}
		
		Delay(1);
	}
}

script mop_update_fragcounter death
{
	if (PlayerClasses[PlayerNumber()] == PLAYER_MOP)
		terminate;

	// go to killer
	SetActivatorToTarget(0);
	
	int killer = PlayerNumber();
	if (PlayerClasses[killer] == PLAYER_MARINE)
		terminate;

	int frags = ++MopFrags[killer];
	
	SetHUDSize(320,240,0);
	SetFont("BIGFONT");
	HUDMessage(d:frags;HUDMSG_PLAIN, HID_MOPFRAGS, CR_RED, 260.0, 30.0, 0);
	SetHUDSize(320,240,0);
	SetFont("MFRAG");
	HUDMessage(s:"A";HUDMSG_PLAIN, HID_MOPFRAGS_ICON, CR_RED, 280.0, 30.0, 0);
}
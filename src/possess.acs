int LastDeathPosition[MAX_PLAYERS][4];
#define POSSESSED_ADDITIONAL_HP 10000

int MonsterItemsTemp[NUM_MONSTER_ITEMS];

script mop_possess (void)
{
	int player = 1000 + PlayerNumber();

	// use unique tid for every player
	// otherwise this could cause some serious problems like imps with over 9000 hp
	// based on vctf tidfuck expirience
	int utid = GenTempTid();
	
	// Select the monster we are pointing at.
	SetActivatorToTarget(0);
	if (PlayerNumber() != -1)
		terminate; // Cannot possess a player.
		
	// Temporarily change the monster's tid.
	Thing_ChangeTid(0, utid);

	// Store monster properties.
	int type = IdentifyMonsterType(utid);
	int x = GetActorX(utid);
	int y = GetActorY(utid);
	int z = GetActorZ(utid);
	int angle = GetActorAngle(utid);
	int health = GetActorProperty(utid, APROP_HEALTH);
	int spawnhealth = GetActorProperty(utid, APROP_SPAWNHEALTH);
	int vx = GetActorVelX(utid);
	int vy = GetActorVelY(utid);
	int vz = GetActorVelZ(utid);
	
	// Dead and unknown actors can't be possessed.
	if (health <= 0 || type == -1)
	{
		Thing_ChangeTid(utid, 0);
		terminate;
	}
	
	// Save monster items.
	for (int i = 0; i < NUM_MONSTER_ITEMS; i++)
		MonsterItemsTemp[i] = CheckActorInventory(utid, MonsterItems[i]);
	
	// Remove the monster and move puppetmaster to the exact position of the monster.
	SetActivator(player);
	Thing_Remove(utid);
	SetActorPosition(0, x, y, z, false);
	SetActorAngle(0, angle);

	// Morph!
	MorphActor(0, StrParam(s:"Possessed", s:MonsterTypes[type][MONSTER_ACTORNAME]), "", INT_MAX, 0, "NoFlash", "NoFlash");
	PossessedCount++;
	
	// Give flag.
	GiveInventory("IsPossessed", 1);
	
	// Select first attack.
	GiveInventory("Attack1", 1);
	
	// Give back items.
	for (i = 0; i < NUM_MONSTER_ITEMS; i++)
		GiveInventory(MonsterItems[i], MonsterItemsTemp[i]);

	// Set properties.
	SetPlayerProperty(0, true, PROP_NOTARGET);
	SetPlayerProperty(0, MonsterTypes[type][MONSTER_FLAGS] & MONSTF_FLYING, PROP_FLY);
	SetActorProperty(0, APROP_HEALTH, health * DamageFactor / 1.0 + POSSESSED_ADDITIONAL_HP);
	SetActorVelocity(0, vx, vy, vz, false, true);

	// Show HUD.
	ACS_ExecuteAlways(mop_possessed_hud, 0, PlayerNumber(), DamageFactor, spawnhealth << 16 | type);
	
	// Run script.
	int scriptnum = MonsterTypes[type][MONSTER_SCRIPT]- 2146435072;
	if (scriptnum != 0)
		ACS_ExecuteAlways(scriptnum, 0);
	
	// Run evasion script.
	int evadespeed = MonsterTypes[type][MONSTER_EVADESPEED] - 2146435072;
	if (evadespeed != 0)
		ACS_ExecuteAlways(mop_evade, 0, evadespeed);

	// Fix firing instantly after possessing.
	SetPlayerProperty(0, true, PROP_TOTALLYFROZEN);
	Delay(7);
	SetPlayerProperty(0, false, PROP_TOTALLYFROZEN);

	// Wait until the monster dies or puppetmaster leaves.
	// And record the hp difference in case the monster died.
	int hp1 = GetActorProperty(0, APROP_HEALTH);
	int hp2 = GetActorProperty(0, APROP_HEALTH);
	while (hp2 > POSSESSED_ADDITIONAL_HP && !(GetPlayerInput(-1, INPUT_BUTTONS) & (BT_CROUCH | BT_SPEED)))
	{	
		if (CheckInventory("PossessedSuicide") == 1)
		{
			SetActorState(0, "Suicide");
			GiveInventory("PossessedSuicide", 1);
		}
	
		Delay(1);
		
		hp1 = hp2;
		hp2 = GetActorProperty(0, APROP_HEALTH);
	}
	
	// Record last death's point to respawn there.
	LastDeathPosition[PlayerNumber()][0] = GetActorX(0);
	LastDeathPosition[PlayerNumber()][1] = GetActorY(0);
	LastDeathPosition[PlayerNumber()][2] = GetActorZ(0);
	LastDeathPosition[PlayerNumber()][3] = GetActorAngle(0);
	
	// The position of the monster.
	x = GetActorX(0);
	y = GetActorY(0);
	z = GetActorZ(0);
	vx = GetActorVelX(0);
	vy = GetActorVelY(0);
	vz = GetActorVelZ(0);
	angle = GetActorAngle(0);
	
	// Was it suicide?
	int suicide = CheckInventory("PossessedSuicide");
	
	// Unmorph.
	UnmorphActor(0, true);
	PossessedCount--;
	SetActorProperty(0, APROP_HEALTH, 1);
	SetPlayerProperty(0, true, PROP_FLY);
	
	// Take away flag.
	TakeInventory("IsPossessed", 1);
	
	// Don't spawn body if suicided.
	if (suicide)
	{
		TakeInventory("PossessedSuicide", 2);
		terminate;
	}
	
	// Spawn the replacement actor.
	SpawnForced(MonsterTypes[type][MONSTER_ACTORNAME], x, y, z, utid, angle>>8);
	SetActorVelocity(utid, vx, vy, vz, false, true);
	
	// Give back items and take them away from puppetmaster just in case.
	for (i = 0; i < NUM_MONSTER_ITEMS; i++)
	{
		GiveActorInventory(utid, MonsterItems[i], CheckInventory(MonsterItems[i]));
		TakeInventory(MonsterItems[i], CheckInventory(MonsterItems[i]));
	}
	
	// Transfer health.
	SetActorProperty(utid, APROP_HEALTH, FixedDiv((hp1 - POSSESSED_ADDITIONAL_HP) * 1.0, DamageFactor) / 1.0);
	Thing_Damage(utid, hp1 - hp2, 0);
	
	Thing_ChangeTid(utid, 0);
}

// Puppeter custom hud drawing.
script mop_possessed_hud(int player, int df, int spawnhp_type) CLIENTSIDE
{
	if (ConsolePlayerNumber() != player)
		terminate;
		
	int spawnhp = spawnhp_type >> 16;
	int type = spawnhp_type & 0x0000ffff;

	while (GetActorProperty(0, APROP_HEALTH) > POSSESSED_ADDITIONAL_HP)
	{
		// Ripped from MOP-X.
		SetHUDSize(400,300,0);
		SetFont("SMALLFONT");
		HUDMessage(
			i:FixedDiv((GetActorProperty(0,APROP_HEALTH) - POSSESSED_ADDITIONAL_HP) * 1.0, df) / 1.0,
			s:"/",
			i:spawnhp;
			HUDMSG_PLAIN, 0, CR_RED, 50.0, 280.0, 0.03
		);
		// End of MOP-X code.
		SetHUDSize(400,300,0);
		SetFont(MonsterTypes[type][MONSTER_SPRITE]);
		HUDMessage(s:"A"; HUDMSG_PLAIN, 0, CR_UNTRANSLATED, 60.0, 275.0, 0.03);
		
		Delay(1);
	}
}

// Move the puppetmaster to the place of his last death.
script mop_respawn_puppetmaster RESPAWN
{
	if (!ThingCountName("PuppetMaster", 1000 + PlayerNumber()))
		terminate;
		
	int x = LastDeathPosition[PlayerNumber()][0];
	int y = LastDeathPosition[PlayerNumber()][1];
	int z = LastDeathPosition[PlayerNumber()][2];

	SetActorPosition(0, x, y, z, false);
	SetActorAngle(0, LastDeathPosition[PlayerNumber()][3]);
}
